<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在vue中取消eslint规范</title>
    <link href="undefined2020/06/28/%E5%9C%A8vue%E4%B8%AD%E5%8F%96%E6%B6%88eslint%E8%A7%84%E8%8C%83/"/>
    <url>2020/06/28/%E5%9C%A8vue%E4%B8%AD%E5%8F%96%E6%B6%88eslint%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>在vue项目中安装了eslint模块，在项目中如果定义某一个变量，且没有使用，在终端中就会报错会出现** is defined but never used eslint<br>我们可以在package-json的根目录下，创建一个vue.config.js,在这个js文件中输入如下代码并保存</p><p>module.exports = {<br>    // 禁用eslint-loader<br>    lintOnSave:false<br>}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>后台接口统一</title>
    <link href="undefined2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/"/>
    <url>2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<hr><p>title: 后台接口统一<br>date: 2020-06-04 21:41:54<br>tags:后台接口</p><p>—我们一般会在前端多个页面向后台数据库发送请求，对数据进行增删改查。在后端数据库中，为了能够对不同页面的数据进行分类，我们会在在后端中创建多个模型。一个模型可能对应多个接口路由，如下图</p><p>Category模型的路由：<br><img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/categories.png" srcset="undefined" alt="Category"> </p><p>Article模型的路由：<br><img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/articles.png" srcset="undefined" alt="Article"></p><p>观察这两个模型的路由接口，它们除了模块名，和路由地址不一样以外，其中的代码都是一样的。在数据库中可能还有其他模型也有这些相同功能的路由接口，如果在接口index.js文件中，都对每一个模型写这些除模块名和路由地址以外都相同路由接口代码，那整个index.js文件中的代码多余，自己写起来也会很累，那我们能不能给这些功能相似的路由接口统一呢？当然可以！</p><p>1.我们先解决在后端接收不同路径。我们在后端对应的路由接口路径一个变量resource，接收前端页面不同路由路径。但是我们统一接口的路由，它们的功能都是相同的，所以我们在后端路径中再定义一个常量，方便我们区别其他不同功能的路由路径。再去前端页面，在路由中对应的添加这个常量。</p><pre><code>app.use(&apos;/admit/api/rest/:resource&apos;，router）</code></pre><p>2.根据前端页面发送的路由路径，找到相应的模型。在这里我们要使用‘inflection’包，它可以将复数小写的单词转换成大写原型。</p><pre><code>npm install --save inflection</code></pre><p> 根据路由，找到相应的模块名，并将这个模块名挂载在req上</p><pre><code>const modelName=require(&apos;inflection&apos;).classify(req.params.resource)req.Model=require(`../models/${modelName}`)</code></pre><p>3.将上一步作为一个中间件，插入第一步中</p><pre><code>app.use(&apos;/admit/api/rest/:resource&apos;，async(req,req,next)=&gt;{   const modelName=require(&apos;inflection&apos;).classify(req.params.resource)   req.Model=require(`../models/${modelName}`)   next()   },router）</code></pre><p>4.修改后端index.js中路由路径</p><p>   <img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/present.png" srcset="undefined" alt="Present"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>react的生命周期</title>
    <link href="undefined2019/11/11/react%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>2019/11/11/react%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<hr><p>title: react中受控组件和非受控组件<br>date: 2019-11-11 01:10:16<br>tags:<br>—受控组件和非受控组件顾名思义就是：这个组件是不是由自己控制。<br>由自己控制的就是受控组件，自己控制不了的就是非受控组件。但是问题来了，我们到底是控制组件的什么呢？</p><p>—受控组件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的博客搭建</title>
    <link href="undefined2019/11/08/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>2019/11/08/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<hr><p>title: 个人博客搭建<br>date: 2019-11-08 13:52:55<br>tags:<br>—搭建hexo博客</p><p>—1.下载node.js ：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br> （1）验证node.js  npm下载成功：</p><pre><code>node -v  npm -v</code></pre><p>—2.更换淘宝下载源：</p><pre><code>cnpm config set registry https://registry.npm.taobao.org/</code></pre><p>—3.下载git：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>—4进入git bush 设置GitHub 账号的名字，邮箱</p><pre><code>git config -global  user.name &quot;xxx&quot;git  config -global user.email  &quot;xxx&quot;</code></pre><p>—5.安装hexo：</p><pre><code>npm install -g hexo-cli</code></pre><p>—6验证是否下载成功： </p><pre><code>hexo -v</code></pre><p>—7.正式搭建hexo博客：</p><pre><code>hexo init  </code></pre><p>—8.创建自己的hexo博客的第一篇文章：</p><pre><code>hexo  n  &quot;文章名“</code></pre><p>—9.下载git插件：</p><pre><code>hexo install  git-deployer --save</code></pre><p>—10.在弹出的窗口输入自己的GitHub账号和密码</p><p>—11.在GitHub创建名字为自己GitHub账户的仓库，并将自己的hexo博客配置在仓库中：</p><pre><code>hexo d</code></pre><p>—12.完成（所有配置都在_config文件中配置）    </p><p>—13.在本地预览自己的博客：</p><pre><code>hexo s</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>