<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>上传图片</title>
    <link href="undefined2020/07/04/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>2020/07/04/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>在前端页面向后端上传一张图片，后端接收也需要一个中间件multer,这个中间件会在设置路径之后创建一个文件夹</p><pre><code>const multer=require(&quot;multer&quot;)const upload=multer({dest:_dirname+&quot;/../../upload&quot;})app.post(&quot;admin/api/upload&quot;,upload.single(&apos;file&apos;),async(req,res)=&gt;{    const file=req.file    file.url=`http://localhost:3000/upload/${file.filename}`    res.send(file)})</code></pre>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图片上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后台向前端页面发送token</title>
    <link href="undefined2020/07/03/%E5%90%8E%E5%8F%B0%E5%90%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%8F%91%E9%80%81token/"/>
    <url>2020/07/03/%E5%90%8E%E5%8F%B0%E5%90%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%8F%91%E9%80%81token/</url>
    
    <content type="html"><![CDATA[<p>1.token主要目的：在后台中用户的用户名和密码都验证成功之后，向前端会发送一个token，这个token用于在admin<br>中页面各个接口中安全地获取数据</p><p>2.token的生成步骤：</p><pre><code>const jwt=required(&quot;jsonwbetoken&quot;)const token=jwt.sign({         _id:user.id         name:user.name     },&quot;shdghsagd&quot;)   res.send(token)</code></pre><p>3.在前端页面接收token并且储存在localStorage中</p><pre><code>localStorage.token=res.datathis.router.push(&quot;/)this.$message({    type:&quot;success&quot;    message:&quot;登入成功&quot;})</code></pre><p>4.登入成功之后在admin各个页面的请求接口处，将token返回给后台验证</p><pre><code> axios.interceptors.request,use(function(config){         if(localStorage.token){              config.headers.Authorization=&quot;Bear&quot;+localStorage          }         return config},function(err){})</code></pre><p>5.在后端接口处验证token，在接口处使用一个中间件</p><pre><code>const jwt=required(&quot;jsonwebtoken&quot;)const AdminUser=required(&quot;../model/AdminUser)const assert=required(&quot;http-assert&quot;)async (req,res,next)=&gt;{    const token=String(req.headers.authorization||&apos; &apos;).splice(&quot; &quot;)    assert(token,422,&quot;请重新登入&quot;)    const tokenData=jwt.verify(token,req.app.get(&quot;secret&quot;))    assert(tokenData._id,422,&quot;请重新登入&quot;)    const  user=await AdminUser.findOne(tokenData._id )    assert(user,422,&quot;请重新登入&quot;)    await next()}</code></pre><p>6.在后台对错误进行处理</p><pre><code> app.use(async(err,req,res,next)=&gt;{ res.status(err.statusCode||500).send({       message:err.message })  })    }</code></pre><p>7.前端页面接收返回的错误信息，并跳转到登入页面</p><pre><code>axios.interceptors.response(res={    return res},err=&gt;{    if(err.response.data.message){        Vue.$protoType.message({            type:&quot;error&quot;,            message:err.response.data.message        })    }    if(err.response.data.status){        router.push(&quot;/login)    }    return Promise.reject(err)})         </code></pre>]]></content>
    
    
    <categories>
      
      <category>接口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB中的populate查询方法</title>
    <link href="undefined2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/"/>
    <url>2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>1.先定义Article模块和Category模块</p><p>Category模块： <img src="/2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/Category.png" srcset="undefined" alt="Category"></p><p>Article模块：  <img src="/2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/Article.png" srcset="undefined" alt="Article"></p><ol start="2"><li><p><img src="/2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/result.png" srcset="undefined" alt="result"></p></li><li><p><img src="/2020/07/03/MongoDB%E4%B8%AD%E7%9A%84populate%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/result1.png" srcset="undefined" alt="result1"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多表查询</tag>
      
      <tag>populate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在vue中取消eslint规范</title>
    <link href="undefined2020/06/28/%E5%9C%A8vue%E4%B8%AD%E5%8F%96%E6%B6%88eslint%E8%A7%84%E8%8C%83/"/>
    <url>2020/06/28/%E5%9C%A8vue%E4%B8%AD%E5%8F%96%E6%B6%88eslint%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>在vue项目中安装了eslint模块，在项目中如果定义某一个变量，且没有使用，在终端中就会报错会出现** is defined but never used eslint<br>以下两种方法可以解决这个问题</p><p>1.我们可以在package-json的根目录下，创建一个vue.config.js,在这个js文件中输入如下代码并保存<br>module.exports = {<br>    // 禁用eslint-loader<br>    lintOnSave:false<br>}</p><p>2.在package.json中找到eslintConfig,在它的下面有一个rules，<br><img src="/2020/06/28/%E5%9C%A8vue%E4%B8%AD%E5%8F%96%E6%B6%88eslint%E8%A7%84%E8%8C%83/setup.png" srcset="undefined" alt="setup"></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模块引起的报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后台接口统一</title>
    <link href="undefined2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/"/>
    <url>2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>我们一般会在前端多个页面向后台数据库发送请求，对数据进行增删改查。在后端数据库中，为了能够对不同页面的数据进行分类，我们会在在后端中创建多个模型。一个模型可能对应多个接口路由，如下图</p><p>Category模型的路由：<br><img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/categories.png" srcset="undefined" alt="Category"> </p><p>Article模型的路由：<br><img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/articles.png" srcset="undefined" alt="Article"></p><p>观察这两个模型的路由接口，它们除了模块名，和路由地址不一样以外，其中的代码都是一样的。在数据库中可能还有其他模型也有这些相同功能的路由接口，如果在接口index.js文件中，都对每一个模型写这些除模块名和路由地址以外都相同路由接口代码，那整个index.js文件中的代码多余，自己写起来也会很累，那我们能不能给这些功能相似的路由接口统一呢？当然可以！</p><p>1.我们先解决在后端接收不同路径。我们在后端对应的路由接口路径一个变量resource，接收前端页面不同路由路径。但是我们统一接口的路由，它们的功能都是相同的，所以我们在后端路径中再定义一个常量，方便我们区别其他不同功能的路由路径。再去前端页面，在路由中对应的添加这个常量。</p><pre><code>app.use(&apos;/admit/api/rest/:resource&apos;，router）</code></pre><p>2.根据前端页面发送的路由路径，找到相应的模型。在这里我们要使用‘inflection’包，它可以将复数小写的单词转换成大写原型。</p><pre><code>npm install --save inflection</code></pre><p> 根据路由，找到相应的模块名，并将这个模块名挂载在req上</p><pre><code>const modelName=require(&apos;inflection&apos;).classify(req.params.resource)req.Model=require(`../models/${modelName}`)</code></pre><p>3.将上一步作为一个中间件，插入第一步中</p><pre><code>app.use(&apos;/admit/api/rest/:resource&apos;，async(req,req,next)=&gt;{   const modelName=require(&apos;inflection&apos;).classify(req.params.resource)   req.Model=require(`../models/${modelName}`)   next()   },router）</code></pre><p>4.修改后端index.js中路由路径</p><p>   <img src="/2020/06/04/%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E7%BB%9F%E4%B8%80/present.png" srcset="undefined" alt="Present"> </p>]]></content>
    
    
    <categories>
      
      <category>接口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后台接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react中受控组件和非受控组件</title>
    <link href="undefined2019/11/11/react%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>2019/11/11/react%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>受控组件和非受控组件顾名思义就是：这个组件是不是由自己控制。<br>由自己控制的就是受控组件，自己控制不了的就是非受控组件。但是问题来了，我们到底是控制组件的什么呢？</p><p>1.受控组件：在react中一些表单组件如<input> <textarea> </textarea><select>,在它们的使用过程中，先对他们进行赋值处理。它们的value值是通过React的state控制的，<br>并且在通过onChange事件中的setState进行修改。当要对某个组件需要更改value值时就使用受控组件</select></p><p>2、非受控组件：就是不需要先组件进行赋值，它的值直接关联某个dom元素，它的值会随之dom元素的值变化而变化。不需要修改value值就使用非受控组件。</p><pre><code>&lt;input placeholder=&quot;请先输入&quot; label=&quot;姓名&quot; ref={input=&gt;this.username=input}/&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="undefined2019/11/08/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>2019/11/08/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>搭建hexo博客</p><p>—1.下载node.js ：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br> （1）验证node.js  npm下载成功：</p><pre><code>node -v  npm -v</code></pre><p>—2.更换淘宝下载源：</p><pre><code>cnpm config set registry https://registry.npm.taobao.org/</code></pre><p>—3.下载git：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>—4进入git bush 设置GitHub 账号的名字，邮箱</p><pre><code>git config -global  user.name &quot;xxx&quot;git  config -global user.email  &quot;xxx&quot;</code></pre><p>—5.安装hexo：</p><pre><code>npm install -g hexo-cli</code></pre><p>—6验证是否下载成功： </p><pre><code>hexo -v</code></pre><p>—7.正式搭建hexo博客：</p><pre><code>hexo init  </code></pre><p>—8.创建自己的hexo博客的第一篇文章：</p><pre><code>hexo  n  &quot;文章名“</code></pre><p>—9.下载git插件：</p><pre><code>hexo install  git-deployer --save</code></pre><p>—10.在弹出的窗口输入自己的GitHub账号和密码</p><p>—11.在GitHub创建名字为自己GitHub账户的仓库，并将自己的hexo博客配置在仓库中：</p><pre><code>hexo d</code></pre><p>—12.完成（所有配置都在_config文件中配置）    </p><p>—13.在本地预览自己的博客：</p><pre><code>hexo s</code></pre>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>person</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>